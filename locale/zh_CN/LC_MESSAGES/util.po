# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2021, The Tornado Authors
# This file is distributed under the same license as the Tornado package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tornado release\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-08 09:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../util.rst:2
msgid "``tornado.util`` --- General-purpose utilities"
msgstr ""

#: of tornado.util:1
msgid "Miscellaneous utility functions and classes."
msgstr ""

#: of tornado.util:3
msgid ""
"This module is used internally by Tornado.  It is not necessarily "
"expected that the functions and classes defined here will be useful to "
"other applications, but they are documented here in case they are."
msgstr ""

#: of tornado.util:7
msgid ""
"The one public-facing part of this module is the `Configurable` class and"
" its `~Configurable.configure` method, which becomes a part of the "
"interface of its subclasses, including `.AsyncHTTPClient`, `.IOLoop`, and"
" `.Resolver`."
msgstr ""

#: of tornado.util.TimeoutError:1
msgid "Exception raised by `.with_timeout` and `.IOLoop.run_sync`."
msgstr ""

#: of tornado.util.TimeoutError:3
msgid ""
"Unified ``tornado.gen.TimeoutError`` and ``tornado.ioloop.TimeoutError`` "
"as ``tornado.util.TimeoutError``. Both former names remain as aliases."
msgstr ""

#: of tornado.util.ObjectDict:1
msgid "Makes a dictionary behave like an object, with attribute-style access."
msgstr ""

#: of tornado.util.GzipDecompressor:1
msgid "Streaming gzip decompressor."
msgstr ""

#: of tornado.util.GzipDecompressor:3
msgid ""
"The interface is like that of `zlib.decompressobj` (without some of the "
"optional arguments, but it understands gzip headers and checksums."
msgstr ""

#: of tornado.util.GzipDecompressor.decompress:1
msgid "Decompress a chunk, returning newly-available data."
msgstr ""

#: of tornado.util.GzipDecompressor.decompress:3
msgid ""
"Some data may be buffered for later processing; `flush` must be called "
"when there is no more input data to ensure that all data was processed."
msgstr ""

#: of tornado.util.GzipDecompressor.decompress:7
msgid ""
"If ``max_length`` is given, some input data may be left over in "
"``unconsumed_tail``; you must retrieve this value and pass it back to a "
"future call to `decompress` if it is not empty."
msgstr ""

#: of tornado.util.GzipDecompressor.unconsumed_tail:1
msgid "Returns the unconsumed portion left over"
msgstr ""

#: of tornado.util.GzipDecompressor.flush:1
msgid "Return any remaining buffered data not yet returned by decompress."
msgstr ""

#: of tornado.util.GzipDecompressor.flush:3
msgid ""
"Also checks for errors such as truncated input. No other methods may be "
"called on this object after `flush`."
msgstr ""

#: of tornado.util.import_object:1
msgid "Imports an object by name."
msgstr ""

#: of tornado.util.import_object:3
msgid ""
"``import_object('x')`` is equivalent to ``import x``. "
"``import_object('x.y.z')`` is equivalent to ``from x.y import z``."
msgstr ""

#: of tornado.util.errno_from_exception:1
msgid "Provides the errno from an Exception object."
msgstr ""

#: of tornado.util.errno_from_exception:3
msgid ""
"There are cases that the errno attribute was not set so we pull the errno"
" out of the args but if someone instantiates an Exception without any "
"args you will get a tuple error. So this function abstracts all that "
"behavior to give you a safe way to get the errno."
msgstr ""

#: of tornado.util.re_unescape:1
msgid "Unescape a string escaped by `re.escape`."
msgstr ""

#: of tornado.util.re_unescape:3
msgid ""
"May raise ``ValueError`` for regular expressions which could not have "
"been produced by `re.escape` (for example, strings containing ``\\d`` "
"cannot be unescaped)."
msgstr ""

#: of tornado.util.Configurable:1
msgid "Base class for configurable interfaces."
msgstr ""

#: of tornado.util.Configurable:3
msgid ""
"A configurable interface is an (abstract) class whose constructor acts as"
" a factory function for one of its implementation subclasses. The "
"implementation subclass as well as optional keyword arguments to its "
"initializer can be set globally at runtime with `configure`."
msgstr ""

#: of tornado.util.Configurable:8
msgid ""
"By using the constructor as the factory method, the interface looks like "
"a normal class, `isinstance` works as usual, etc.  This pattern is most "
"useful when the choice of implementation is likely to be a global "
"decision (e.g. when `~select.epoll` is available, always use it instead "
"of `~select.select`), or when a previously-monolithic class has been "
"split into specialized subclasses."
msgstr ""

#: of tornado.util.Configurable:16
msgid ""
"Configurable subclasses must define the class methods `configurable_base`"
" and `configurable_default`, and use the instance method `initialize` "
"instead of ``__init__``."
msgstr ""

#: of tornado.util.Configurable:22
msgid ""
"It is now possible for configuration to be specified at multiple levels "
"of a class hierarchy."
msgstr ""

#: of tornado.util.Configurable.configurable_base:1
msgid "Returns the base class of a configurable hierarchy."
msgstr ""

#: of tornado.util.Configurable.configurable_base:3
msgid ""
"This will normally return the class in which it is defined. (which is "
"*not* necessarily the same as the ``cls`` classmethod parameter)."
msgstr ""

#: of tornado.util.Configurable.configurable_default:1
msgid "Returns the implementation class to be used if none is configured."
msgstr ""

#: of tornado.util.Configurable._initialize:1
msgid "Initialize a `Configurable` subclass instance."
msgstr ""

#: of tornado.util.Configurable._initialize:3
msgid "Configurable classes should use `initialize` instead of ``__init__``."
msgstr ""

#: of tornado.util.Configurable._initialize:5
msgid "Now accepts positional arguments in addition to keyword arguments."
msgstr ""

#: of tornado.util.Configurable.configure:1
msgid "Sets the class to use when the base class is instantiated."
msgstr ""

#: of tornado.util.Configurable.configure:3
msgid ""
"Keyword arguments will be saved and added to the arguments passed to the "
"constructor.  This can be used to set global defaults for some "
"parameters."
msgstr ""

#: of tornado.util.Configurable.configured_class:1
msgid "Returns the currently configured class."
msgstr ""

#: of tornado.util.ArgReplacer:1
msgid "Replaces one value in an ``args, kwargs`` pair."
msgstr ""

#: of tornado.util.ArgReplacer:3
msgid ""
"Inspects the function signature to find an argument by name whether it is"
" passed by position or keyword.  For use in decorators and similar "
"wrappers."
msgstr ""

#: of tornado.util.ArgReplacer.get_old_value:1
msgid "Returns the old value of the named argument without replacing it."
msgstr ""

#: of tornado.util.ArgReplacer.get_old_value:3
msgid "Returns ``default`` if the argument is not present."
msgstr ""

#: of tornado.util.ArgReplacer.replace:1
msgid "Replace the named argument in ``args, kwargs`` with ``new_value``."
msgstr ""

#: of tornado.util.ArgReplacer.replace:3
msgid ""
"Returns ``(old_value, args, kwargs)``.  The returned ``args`` and "
"``kwargs`` objects may not be the same as the input objects, or the input"
" objects may be mutated."
msgstr ""

#: of tornado.util.ArgReplacer.replace:7
msgid ""
"If the named argument was not found, ``new_value`` will be added to "
"``kwargs`` and None will be returned as ``old_value``."
msgstr ""

#: of tornado.util.timedelta_to_seconds:1
msgid "Equivalent to ``td.total_seconds()`` (introduced in Python 2.7)."
msgstr ""

