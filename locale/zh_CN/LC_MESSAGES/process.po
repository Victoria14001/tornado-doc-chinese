# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2021, The Tornado Authors
# This file is distributed under the same license as the Tornado package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tornado release\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-08 09:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../process.rst:2
msgid "``tornado.process`` --- Utilities for multiple processes"
msgstr ""

#: of tornado.process:1
msgid ""
"Utilities for working with multiple processes, including both forking the"
" server into multiple processes and managing subprocesses."
msgstr ""

#: ../../process.rst:9
msgid "An alias for `subprocess.CalledProcessError`."
msgstr ""

#: of tornado.process.cpu_count:1
msgid "Returns the number of processors on this machine."
msgstr ""

#: of tornado.process.fork_processes:1
msgid "Starts multiple worker processes."
msgstr ""

#: of tornado.process.fork_processes:3
msgid ""
"If ``num_processes`` is None or <= 0, we detect the number of cores "
"available on this machine and fork that number of child processes. If "
"``num_processes`` is given and > 0, we fork that specific number of sub-"
"processes."
msgstr ""

#: of tornado.process.fork_processes:8
msgid ""
"Since we use processes and not threads, there is no shared memory between"
" any server code."
msgstr ""

#: of tornado.process.fork_processes:11
msgid ""
"Note that multiple processes are not compatible with the autoreload "
"module (or the ``autoreload=True`` option to `tornado.web.Application` "
"which defaults to True when ``debug=True``). When using multiple "
"processes, no IOLoops can be created or referenced until after the call "
"to ``fork_processes``."
msgstr ""

#: of tornado.process.fork_processes:17
msgid ""
"In each child process, ``fork_processes`` returns its *task id*, a number"
" between 0 and ``num_processes``.  Processes that exit abnormally (due to"
" a signal or non-zero exit status) are restarted with the same id (up to "
"``max_restarts`` times).  In the parent process, ``fork_processes`` calls"
" ``sys.exit(0)`` after all child processes have exited normally."
msgstr ""

#: of tornado.process.fork_processes:24
msgid "max_restarts defaults to 100."
msgstr ""

#: of tornado.process.Subprocess.initialize:12
#: tornado.process.Subprocess.set_exit_callback:15
#: tornado.process.Subprocess.wait_for_exit:16
#: tornado.process.fork_processes:26
msgid "Availability: Unix"
msgstr ""

#: of tornado.process.task_id:1
msgid "Returns the current task id, if any."
msgstr ""

#: of tornado.process.task_id:3
msgid "Returns None if this process was not created by `fork_processes`."
msgstr ""

#: of tornado.process.Subprocess:1
msgid "Wraps ``subprocess.Popen`` with IOStream support."
msgstr ""

#: of tornado.process.Subprocess:3
msgid ""
"The constructor is the same as ``subprocess.Popen`` with the following "
"additions:"
msgstr ""

#: of tornado.process.Subprocess:6
msgid ""
"``stdin``, ``stdout``, and ``stderr`` may have the value "
"``tornado.process.Subprocess.STREAM``, which will make the corresponding "
"attribute of the resulting Subprocess a `.PipeIOStream`. If this option "
"is used, the caller is responsible for closing the streams when done with"
" them."
msgstr ""

#: of tornado.process.Subprocess:12
msgid ""
"The ``Subprocess.STREAM`` option and the ``set_exit_callback`` and "
"``wait_for_exit`` methods do not work on Windows. There is therefore no "
"reason to use this class instead of ``subprocess.Popen`` on that "
"platform."
msgstr ""

#: of tornado.process.Subprocess:17 tornado.process.Subprocess.initialize:8
msgid "The ``io_loop`` argument (deprecated since version 4.1) has been removed."
msgstr ""

#: of tornado.process.Subprocess.set_exit_callback:1
msgid "Runs ``callback`` when this process exits."
msgstr ""

#: of tornado.process.Subprocess.set_exit_callback:3
msgid "The callback takes one argument, the return code of the process."
msgstr ""

#: of tornado.process.Subprocess.set_exit_callback:5
msgid ""
"This method uses a ``SIGCHLD`` handler, which is a global setting and may"
" conflict if you have other libraries trying to handle the same signal.  "
"If you are using more than one ``IOLoop`` it may be necessary to call "
"`Subprocess.initialize` first to designate one ``IOLoop`` to run the "
"signal handlers."
msgstr ""

#: of tornado.process.Subprocess.set_exit_callback:11
msgid ""
"In many cases a close callback on the stdout or stderr streams can be "
"used as an alternative to an exit callback if the signal handler is "
"causing a problem."
msgstr ""

#: of tornado.process.Subprocess.wait_for_exit:1
msgid "Returns a `.Future` which resolves when the process exits."
msgstr ""

#: of tornado.process.Subprocess.wait_for_exit:3
msgid "Usage::"
msgstr ""

#: of tornado.process.Subprocess.wait_for_exit:7
msgid ""
"This is a coroutine-friendly alternative to `set_exit_callback` (and a "
"replacement for the blocking `subprocess.Popen.wait`)."
msgstr ""

#: of tornado.process.Subprocess.wait_for_exit:10
msgid ""
"By default, raises `subprocess.CalledProcessError` if the process has a "
"non-zero exit status. Use ``wait_for_exit(raise_error=False)`` to "
"suppress this behavior and return the exit status without raising."
msgstr ""

#: of tornado.process.Subprocess.initialize:1
msgid "Initializes the ``SIGCHLD`` handler."
msgstr ""

#: of tornado.process.Subprocess.initialize:3
msgid ""
"The signal handler is run on an `.IOLoop` to avoid locking issues. Note "
"that the `.IOLoop` used for signal handling need not be the same one used"
" by individual Subprocess objects (as long as the ``IOLoops`` are each "
"running in separate threads)."
msgstr ""

#: of tornado.process.Subprocess.uninitialize:1
msgid "Removes the ``SIGCHLD`` handler."
msgstr ""

