# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2021, The Tornado Authors
# This file is distributed under the same license as the Tornado package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tornado release\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-08 09:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../guide/templates.rst:2
msgid "模版和 UI"
msgstr ""

#: ../../guide/templates.rst:8
msgid "Tornado 包含了一个简单, 快速, 灵活的模版语言. 这章节也描述了与语言相关的国际化问题."
msgstr ""

#: ../../guide/templates.rst:11
msgid ""
"Tornado 也可以使用其它的 Python 模版语言, 虽然没有将这些系统的整合到 `.RequestHandler.render` 中. "
"而是简单的将模版转换成字符串发送给 `.RequestHandler.write`"
msgstr ""

#: ../../guide/templates.rst:16
msgid "设置模版"
msgstr ""

#: ../../guide/templates.rst:18
msgid ""
"默认情况下, Tornado 会寻找在当前 ``.py`` 文件相同目录下的所关联的模版文件. 如果要将模版文件放到另外一个目录中, 使用 "
"``template_path`` `应用程序设置 <.Application.settings>` (或者覆盖 "
"`.RequestHandler.get_template_path` 如果你在不同的处理程序中有不同的模版)."
msgstr ""

#: ../../guide/templates.rst:23
msgid ""
"如果要从非文件系统路径加载模版, 在子类 `tornado.template.BaseLoader` 中配置设置 "
"``template_loader`` ."
msgstr ""

#: ../../guide/templates.rst:26
msgid ""
"被编译过的模版默认时被缓存的; 要关闭缓存使得每次每次对于文件的改变都是可见的, 使用应用程序设置 "
"``compiled_template_cache=False`` 或者 ``debug=True``."
msgstr ""

#: ../../guide/templates.rst:32
msgid "模版语法"
msgstr ""

#: ../../guide/templates.rst:34
msgid "Tornado 模本文件仅仅是一个 HTML (或者其他基于文本的文件格式) 附加 Python 控制语句和内建的表达式::"
msgstr ""

#: ../../guide/templates.rst:50
msgid "如果你将这个模版文件保存为 \"template.html\" 然后将你的 Python 文件保存在同一目录, 你可以用这种方式来使用模版:"
msgstr ""

#: ../../guide/templates.rst:63
#, python-format
msgid ""
"Tornado 模版支持 *控制语句 (control statements)* 和 *表达式 (expressions)* . 控制语句被 "
"``{%`` and ``%}`` 包裹着, 例如., ``{% if len(items) > 2 %}``. 表达式被 ``{{`` 和 "
"``}}`` 围绕, 再例如., ``{{ items[0] }}``."
msgstr ""

#: ../../guide/templates.rst:68
msgid ""
"模版中的控制语句多多少少与 Python 中的控制语句相映射. 我们支持 ``if``, ``for``, ``while``, 和 "
"``try``, 所有这些都包含在 ``{%  %}`` 之中. 我们也支持 *模板继承* 使用 ``extends`` 和 ``block`` "
"语句, 详见 `tornado.template`."
msgstr ""

#: ../../guide/templates.rst:73
msgid ""
"表达式可以时任何的 Python 表达式, 包括函数调用. 模版代码可以在以下对象和函数的命名空间中被执行. (注意这个列表可用在 "
"`.RequestHandler.render` 和 `~.RequestHandler.render_string`. 如果你直接在 "
"`.RequestHandler` 外使用 `tornado.template` 模块, 下面许多别名是不可用的)."
msgstr ""

#: ../../guide/templates.rst:79
msgid "``escape``:  `tornado.escape.xhtml_escape` 的别名"
msgstr ""

#: ../../guide/templates.rst:80
msgid "``xhtml_escape``:  `tornado.escape.xhtml_escape` 的别名"
msgstr ""

#: ../../guide/templates.rst:81
msgid "``url_escape``:  `tornado.escape.url_escape` 的别名"
msgstr ""

#: ../../guide/templates.rst:82
msgid "``json_encode``:  `tornado.escape.json_encode` 的别名"
msgstr ""

#: ../../guide/templates.rst:83
msgid "``squeeze``:  `tornado.escape.squeeze` 的别名"
msgstr ""

#: ../../guide/templates.rst:84
msgid "``linkify``:  `tornado.escape.linkify` 的别名"
msgstr ""

#: ../../guide/templates.rst:85
msgid "``datetime``:  Python `datetime` 模块"
msgstr ""

#: ../../guide/templates.rst:86
msgid "``handler``: 目前的 `.RequestHandler` 对象"
msgstr ""

#: ../../guide/templates.rst:87
msgid "``request``:  `handler.request <.HTTPServerRequest>` 的别名"
msgstr ""

#: ../../guide/templates.rst:88
msgid ""
"``current_user``:  `handler.current_user <.RequestHandler.current_user>` "
"的别名"
msgstr ""

#: ../../guide/templates.rst:90
msgid "``locale``:  `handler.locale <.Locale>` 的别名"
msgstr ""

#: ../../guide/templates.rst:91
msgid "``_``:  `handler.locale.translate <.Locale.translate>` 的别名"
msgstr ""

#: ../../guide/templates.rst:92
msgid "``static_url``:  `handler.static_url <.RequestHandler.static_url>` 的别名"
msgstr ""

#: ../../guide/templates.rst:93
msgid ""
"``xsrf_form_html``:  `handler.xsrf_form_html "
"<.RequestHandler.xsrf_form_html>` 的别名"
msgstr ""

#: ../../guide/templates.rst:95
msgid "``reverse_url``:  `.Application.reverse_url` 的别名"
msgstr ""

#: ../../guide/templates.rst:96
msgid "所有 ``ui_methods`` 和 ``ui_modules`` 的 ``Application`` 设置"
msgstr ""

#: ../../guide/templates.rst:98
msgid "所有传递给 `~.RequestHandler.render` 或者 `~.RequestHandler.render_string` 的参数"
msgstr ""

#: ../../guide/templates.rst:101
msgid ""
"当你真正创建一个应用程序时, 你可能会去查看所有 Tornado 模版的特性, 特别时模版继承. 这些内容详见 "
"`tornado.template` 部分 (某些特性, 包括 ``UIModules`` 在 `tornado.web` 模块中描述)"
msgstr ""

#: ../../guide/templates.rst:106
msgid ""
"在引擎下, Tornado 模版被直街翻译成 Python. 在你模版文件中的表达式将会被翻译成 Python 函数来代表原来的模版; "
"我们不在模版语言中阻止任何东西; 我们创造它的目的时为了提供更灵活的特性, 而不是有严格限制的模版系统. 因此, "
"如果你在你的模版文件中随意写入了表达式, 你再执行时将会得到相依随机的错误."
msgstr ""

#: ../../guide/templates.rst:112
#, python-format
msgid ""
"默认情况下, 所有模版文件的输出将会被 `tornado.escape.xhtml_escape` 方法转义. 这个设置可以通过给 "
"`.Application` 传递全局参数 ``autoescape=None`` 或者使用 `.tornado.template.Loader`"
" 构造器进行修改, 或者在模版文件中检测到 ``{% autoescape None %}`` , 或者简单的将 ``{{ ... }}`` "
"替换成 ``{% raw ...%}`` 的表达式. 此外, 可以在设置这些地方的转义函数为 ``None`` 已达到相同的效果."
msgstr ""

#: ../../guide/templates.rst:119
msgid ""
"注意, 尽管 Tornado's 的自动转义在防止 XSS 漏洞上是有帮助的, 但是不能适用于所有的情况.  出现在适当位置的表达式, 例如 "
"Javascript 或者 CSS, 可能需要额外的转义. 此外, 必须要额外注意使用在 HTML 中使用双括号和 `.xhtml_escape`"
" 中包含一些不可信的内容, 或者在属性中使用单独的转义函数 (查看示例. http://wonko.com/post/html-escaping)"
msgstr ""

#: ../../guide/templates.rst:126
msgid "国际化"
msgstr ""

#: ../../guide/templates.rst:128
msgid ""
"目前用户的位置 (不论用户是否登陆) 在请求处理程序中的 ``self.locale`` 和 模版中的 ``locale`` 都是可用的. "
"位置的名字 (例如, ``en_US``)  在 ``locale.name`` 中是可用的, 你也可以通过 "
"`.Locale.translate` 方法来翻译字符串. 模版中也有一个全局函数叫做 ``_()`` 用来翻译字符串. 翻译函数有两种形式::"
msgstr ""

#: ../../guide/templates.rst:136
msgid "这将会根据用户的位置直接翻译, 还有::"
msgstr ""

#: ../../guide/templates.rst:142
msgid ""
"可以根据第三个参数的数量来决定单复数形式. 在以上的例子中, 第一个翻译将会在 ``len(people)`` 是 ``1`` 时被激活, "
"在其它情况下会激活第二个翻译."
msgstr ""

#: ../../guide/templates.rst:146
#, python-format
msgid "大多是翻译时利用 Python 中的变量占位符 ( 前面例子中的 ``%(num)d`` ) 占位符在翻译时可以被替换."
msgstr ""

#: ../../guide/templates.rst:149
msgid "这是一个正确的国际化模版::"
msgstr ""

#: ../../guide/templates.rst:165
msgid ""
"默认情况下, 我们通过用户通过浏览器发送的首部 ``Accept-Language`` 来确定语言. 当我们不能找到默认的语言时我们使用 "
"``en_US`` 作为 ``Accept-Language`` 的值. 如果你希望用户自己设定自己的位置, 你可以通过修改默认选项 "
"`.RequestHandler.get_user_locale` 来实现:"
msgstr ""

#: ../../guide/templates.rst:187
msgid "如果 ``get_user_locale`` 返回 ``None``, 我们将会再使用 ``Accept-Language`` 头部来确定."
msgstr ""

#: ../../guide/templates.rst:190
msgid ""
"`tornado.locale` 模块支持两种格式的翻译: 一种使用 `getttext` 和有关工具的 ``.mo`` 格式, 另一种时简单的 "
"``.csv`` 格式. 应用程序将会在启动时调用 `tornado.locale.load_translations` 或者 "
"`tornado.locale.load_gettext_translations`; 查看这些支持格式方法来获取更详细的信息."
msgstr ""

#: ../../guide/templates.rst:196
msgid ""
"你可以通过调用方法 `tornado.locale.get_supported_locales()` 来查看支持的地理位置. "
"用户的位置将会基于它所在的最近位置. 例如, 用户的位置是 ``es_GT`` , ``es`` 是支持的, ``self.locale`` "
"对那个请求将会设置为 ``es`` . 但如果勋章寻找失败 ``en_US`` 将会作为默认设置."
msgstr ""

#: ../../guide/templates.rst:205
msgid "UI 模版"
msgstr ""

#: ../../guide/templates.rst:207
msgid ""
"Tornado 支持 *UI 模版* 为了更加简单的支持标准, 在你的程序中重用 UI 组件. UI "
"模块就像特殊的方法调用一样用来显示页面上的组件, 它们也可以被报装在 CSS 和 JavaScript 中."
msgstr ""

#: ../../guide/templates.rst:211
msgid ""
"例如, 如果你正在实现一个博客, 你想把博客的入口同时放置在主页和每一页的入口, 你可以定义一个 ``Entry`` 模块来实现它们. 首先, "
"创建一个 Python 模块当作一个 UI 模块, 例如  ``uimodules.py``::"
msgstr ""

#: ../../guide/templates.rst:220
msgid "在 ``ui_modules`` 设置中告诉 Tornado 使用 ``uimodules.py`` ::"
msgstr ""

#: ../../guide/templates.rst:243
msgid ""
"在一个模版中, 你可以利用 ``{% module %}`` 语句来调用一个模版. 例如, 你可以在 ``home.html`` 中调用 "
"``Entry`` 模块::"
msgstr ""

#: ../../guide/templates.rst:250
msgid "还有 ``entry.html`` 中::"
msgstr ""

#: ../../guide/templates.rst:254
msgid ""
"模块可以通过覆盖包含定制的 CSS 和 JavaScript 方法 ``embedded_css``, "
"``embedded_javascript``, ``javascript_files`` , 或者 ``css_files`` 方法::"
msgstr ""

#: ../../guide/templates.rst:264
msgid ""
"CSS 和 JavaScript 模块只会被载入一次不论多少模块在页面中使用了它. CSS 总是被包含在页面的 ``<head>`` 标签中, "
"而且 JavaScript 也总是在页面底部的 ``</body>`` 之前."
msgstr ""

#: ../../guide/templates.rst:269
msgid ""
"当附加的 Python 代码不需要的时候, 模版文件自己可以是一个模块. 例如, 上面的例子可以在下面的 ``module-"
"entry.html`` 中被重写::"
msgstr ""

#: ../../guide/templates.rst:275
msgid "这个被修改过的模块可以这样调用"
msgstr ""

#: ../../guide/templates.rst:277
msgid "{% module Template(\"module-entry.html\", show_comments=True) %}"
msgstr ""

#: ../../guide/templates.rst:279
#, python-format
msgid ""
"``set_resources`` 方法仅在模版通过 ``{% module Template(...) %}`` 调用有效. 不像 ``{% "
"include ... %}`` 指令, 模版模块在模版容器中有一个不同的命名空间 - 它们只能看到全局模版的命名空间和自己的关键字参数."
msgstr ""

